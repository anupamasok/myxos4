
alias physicalSP S0;
physicalSP = ([PTBR + 2*(SP/512)]*512) + (SP%512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];


if (sysCallNo ==8) then
	
	alias PCBIndex S2;
	PCBIndex =0;
	
	while( PCBIndex < 32) do
		if ([READY_LIST + 32*PCBIndex +1]== 0) then
			break;
		endif;
		PCBIndex = PCBIndex + 1;
	endwhile;
	
	if( PCBIndex == 32 ) then
		[physicalSP - 2]=-1;
		ireturn;
	endif;
	
	[READY_LIST + 32*PCBIndex ] =PCBIndex;
	
	
	alias newPTBR S9;
	newPTBR = 1024 + 8 * PCBIndex;
	
	alias page_req S4;
	page_req =0;
	
	alias counter S5;
	counter =0;
	
	
	while ( counter < 4 ) do
		if ([ PTBR + 2*page_req +1] == "01" || [ PTBR + 2*page_req +1] == "11") then
			page_req = page_req +1;
			
		endif;
		counter = counter +1;
	endwhile;
	
	
	counter = 0;
	
	alias page S6;
	page = 29;
	
	while ( page < 64  ) do
		if ([ MEM_LIST + page ] == 0) then
			counter = counter + 1;
		endif;
	page = page + 1;
	endwhile;
		if( counter < page_req ) then 
		[physicalSP - 2]=-1;
		ireturn;
	endif;
	
	counter = 0 ;
	page = 29 ;
	
	while ( counter < page_req ) do
		if ([PTBR + 2*counter+1] == "00") then
			[newPTBR + 2*counter]=-1;
			[newPTBR + 2*counter +1]="00";
			counter = counter +1;	
			continue;
		endif;	
		if( [MEM_LIST + page ] == 0) then
			
			[ MEM_LIST + page ] = 1;
			
			alias counter2 S7;
			counter2 =0;
			
			while (counter2 < 512) do
				[page * 512 + counter2] = [[ PTBR + 2*counter] * 512 + counter2];
				counter2 = counter2 + 1;			
			endwhile;
			
			if( counter2 !=0) then
				[newPTBR + 2*counter] = page;
				[newPTBR + 2*counter +1]=[PTBR + 2*counter+1];
			endif;
			counter = counter +1;
		endif;
		
		page = page +1;
	endwhile;
	
	alias currentPID S8;
	currentPID = (PTBR - 1024)/8;
	
	
	[READY_LIST + 32 * PCBIndex + 1 ] = 1;
	[READY_LIST + 32 * PCBIndex + 2 ] = BP;
	[READY_LIST + 32 * PCBIndex + 3 ] = SP -1;
	[READY_LIST + 32 * PCBIndex + 4 ] = [physicalSP];
	[READY_LIST + 32 * PCBIndex + 5 ] = newPTBR;
	[READY_LIST + 32 * PCBIndex + 6 ] = PTLR;
	[READY_LIST + 32 * PCBIndex + 7 ] = R0;
	[READY_LIST + 32 * PCBIndex + 8 ] = R1;
	[READY_LIST + 32 * PCBIndex + 9 ] = R2;
	[READY_LIST + 32 * PCBIndex + 10 ] = R3;
	[READY_LIST + 32 * PCBIndex + 11 ] = R4;
	[READY_LIST + 32 * PCBIndex + 12 ] = R5;
	[READY_LIST + 32 * PCBIndex + 13 ] = R6;
	[READY_LIST + 32 * PCBIndex + 14 ] = R7;
	
	counter =15;
	
	while ( counter < 32 ) do
		[READY_LIST + 32 * PCBIndex + counter ] = [ READY_LIST + 32 * currentPID + counter ];
	counter = counter + 1;
	endwhile;
	
	counter = 0;
	while ( counter < 8 ) do
		if ( [ FILE_TABLE + 2 * [ READY_LIST + 32 * PCBIndex + 15 + 2 * counter]] !=-1) then 
			[ FILE_TABLE + 2 * [ READY_LIST + 32 * PCBIndex + 15 + 2 * counter]] = [ FILE_TABLE + 2 * [ READY_LIST +   				32* PCBIndex + 15 + 2 * counter]] + 1;
		endif;
		
		counter = counter +1;
	endwhile;
	
	[physicalSP - 2]= PCBIndex;
	alias newphysicalSP S10;
	newphysicalSP = ([newPTBR + 2*((SP-1)/512)]*512) + ((SP-1)%512);	
	[newphysicalSP -1]=-2;
	ireturn;
endif;
	
